
const float stepLenght = 0.04;
const float threshold = 0.5;
const int steps = 500;
const int AOsamples = 100;
const int ShadowSamples = 100;
const float exposure = 1.0;

//vec3 n1 = vec3(1.000,0.000,0.000);
//vec3 n2 = vec3(0.000,1.000,0.000);
//vec3 n3 = vec3(0.000,0.000,1.000);

vec3 n1 = vec3(0.000,0.357,-0.934);
vec3 n2 = vec3(0.934,0.000,-0.357);
vec3 n3 = vec3(0.000,0.851,-0.526);

vec3 n4 = vec3(0.577,0.577,0.577);
vec3 n5 = vec3(-0.577,0.577,0.577);
vec3 n6 = vec3(0.577,-0.577,0.577);
vec3 n7 = vec3(0.577,0.577,-0.577);

vec3 n8 = vec3(0.000,0.357,0.934);
vec3 n9 = vec3(0.000,-0.357,0.934);
vec3 n10 = vec3(0.934,0.000,0.357);
vec3 n11 = vec3(-0.934,0.000,0.357);
vec3 n12 = vec3(0.357,0.934,0.000);
vec3 n13 = vec3(-0.357,0.934,0.000);

vec3 n14 = vec3(0.000,0.851,0.526);
vec3 n15 = vec3(0.000,-0.851,0.526);
vec3 n16 = vec3(0.526,0.000,0.851);
vec3 n17 = vec3(-0.526,0.000,0.851);
vec3 n18 = vec3(0.851,0.526,0.000);
vec3 n19 = vec3(-0.851,0.526,0.000);

const float C1 = 0.429043;
const float C2 = 0.511664;
const float C3 = 0.743125;
const float C4 = 0.886227;
const float C5 = 0.247708;
const vec3 L00  = vec3(0.280531,0.4606972,0.6309007);
const vec3 L1m1 = vec3(0.2609962,0.2613302,0.3495761);
const vec3 L10  = vec3(0.1808434,0.1961804,0.1533686);
const vec3 L11  = vec3(0.00577893,-0.004432095,0.001425629);
const vec3 L2m2 = vec3(0.04190708,0.03164145,0.01601143);
const vec3 L2m1 = vec3(0.1237495,0.08657012,0.03115275);
const vec3 L20  = vec3(-0.009509214,0.0003275797,0.01093131);
const vec3 L21  = vec3(-0.01600223,-0.006198323,0.005226322);
const vec3 L22  = vec3(-0.06324709,-0.0334949,-0.002136759);


// TODO check unity sh9
vec3 calc_sh(vec3 normal) {
	vec3 n  = normalize(normal);
	return (C1 * L22 * (n.x * n.x - n.y * n.y) +
		C3 * L20 *  n.z * n.z +
		C4 * L00 - C5 * L20 +
		2.0 * C1 * L2m2 * n.x * n.y + 
		2.0 * C1 * L21 * n.x * n.z + 
		2.0 * C1 * L2m1 * n.y * n.z + 
		2.0 * C2 * L11 * n.x+
		2.0 * C2 * L1m1 * n.y +
		2.0 * C2 * L10 * n.z);
}


mat3 m = mat3( 0.00,  0.80,  0.60,
              -0.80,  0.36, -0.48,
              -0.60, -0.48,  0.64 );

float hash( float n )
{
    return fract(sin(n)*43758.5453);
}

float noise( in vec3 x )
{
    vec3 p = floor(x);
    vec3 f = fract(x);

    f = f*f*(3.0-2.0*f);

    float n = p.x + p.y*57.0 + 113.0*p.z;

    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),
                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),
                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
    return res;
}

float fbm( vec3 p )
{
    float f;
    f  = 0.5000*noise( p ); p = m*p*2.02;
    f += 0.2500*noise( p ); p = m*p*2.03;
    f += 0.1250*noise( p ); p = m*p*2.01;
    f += 0.0625*noise( p );
    return f;
}

float noise3(vec3 p)
{
    float f1 = sin(fbm(p * 1.592) * 19.12);
    float f2 = sin(fbm(p * 1.458) * 21.17);
    //float f3 = sin(fbm(p * 1.394) * 23.43);
	return fbm(vec3(f1, f2, f1));
}

float protozoo(vec3 p, float size, float sharpness, float noisiness) 
{
    float lp = length(p) / size;
    float ball = (smoothstep(0.0, 2.0, 2.0 - lp) - smoothstep(0.0, 1.6, 1.6 - lp)) * 3.0;
    vec3 n = normalize(p);
    float s;
    float e = 170.0;
    float e2 = 80.0;
    float h;
    
    // spikes
    float s1 = abs(dot(n, n14));
    float s2 = abs(dot(n, n15));
    float s3 = abs(dot(n, n16));
    float s4 = abs(dot(n, n17));
    float s5 = abs(dot(n, n18));
    float s6 = abs(dot(n, n19));
    s1 = pow(s1, e);
    s2 = pow(s2, e);
    s3 = pow(s3, e);
    s4 = pow(s4, e);
    s5 = pow(s5, e);
    s6 = pow(s6, e);
    
    // holes
	float h000 = abs(dot(n, n1));
	float h00 = abs(dot(n, n2));
	float h0 = abs(dot(n, n3));
    float h1 = abs(dot(n, n4));
    float h2 = abs(dot(n, n5));
    float h3 = abs(dot(n, n6));
    float h4 = abs(dot(n, n7));   
    float h5 = abs(dot(n, n8));
    float h6 = abs(dot(n, n9));
    float h7 = abs(dot(n, n10));
    float h8 = abs(dot(n, n11));
    float h9 = abs(dot(n, n12));
    float h10 = abs(dot(n, n13));
	h000 = pow(h000, e2);
	h00 = pow(h00, e2);
	h0 = pow(h0, e2);
    h1 = pow(h1, e2);
    h2 = pow(h2, e2);
    h3 = pow(h3, e2);
    h4 = pow(h4, e2);
    h5 = pow(h5, e2);
    h6 = pow(h6, e2);
    h7 = pow(h1, e2);
    h8 = pow(h2, e2);
    h9 = pow(h3, e2);
    h10 = pow(h4, e2);
    
    float d = clamp(lp / 3.3, 0.0, 1.0) * 0.7;
    d = clamp(d - step(3.0, lp), 0.0, 1.0);
    float sd = (step(1.2, lp) - step(3.0, lp)) - d * sharpness;
    s = (s1 + s2 + s3 + s4 + s5 + s6) * sd;
    float hd = step(0.8, lp) - step(1.7, lp);
    h = (h000 + h00 + h0 + h1 + h2 + h3 + h4 + h5 + h6 + h7 + h8 + h9 + h10) * hd;
    
    float nd = step(0.8, lp) - step(3.0, lp);
	return ball + s - h - noise3(p / size) * noisiness * nd;
}


float K(vec3 pos)
{
    return
      protozoo(pos, 1.0, 1.0, 0.02) +
      //protozoo(pos + vec3(-4.0, 0.0, -8.0), 1.0, 1.5) +
      protozoo(pos, 10.0, 0.0, 0.1);
}


vec3 N(vec3 p,float a) {
	return normalize(vec3(
        a - K(vec3(p.x + 0.05, p.y, p.z)),
        a - K(vec3(p.x, p.y + 0.05, p.z)),
        a - K(vec3(p.x, p.y,p.z + 0.05))));
}


float AO(vec3 p, vec3 normal)
{
    float a = 1.0;
    float d = 1.0 / float(AOsamples);
    float r = 0.2;
    
    for (int i = 0; i < AOsamples; i++)
    {
        float ii = float(i);
        vec3 n = vec3(noise(p * 13.37 * ii) - 0.5, noise(p * 7.777 * ii) - 0.5, noise(p * 11.7575 * ii) - 0.5);
        n = normalize(n);
        if (dot(n, normal) < 0.0) n = -n;
        vec3 pos = p + n * r;
        if (K(pos) > threshold)
        {
            a -= d;
        }
    }
    return clamp(a, 0.0, 1.0);
}


float Shadow(vec3 p, vec3 light)
{
    vec3 d = normalize(light);
    float step = 0.025;
    vec3 p2;
    
    for (int i = 0; i < ShadowSamples; i++)
    {
        p2 = p + d * step * float(i + 1);
        if (K(p2) > threshold)
        {
            return 0.0;
        }
    }
    return 1.0;
}


vec3 lpos1 = normalize(vec3(1.0, 1.0, 1.0));
vec3 lpos2 = normalize(vec3(-2.0, 0.0, 1.0));
vec3 lcol1 = vec3(1.3, 1.3, 1.5);
vec3 lcol2 = vec3(0.6, 0.7, 0.8);
float lbr = 2.0;
float materialBr = 0.05;
float materialSpec = 60.0;
float fresnelSpec = 20.0;

vec3 Lighting(vec3 normal, vec3 pos, vec3 raydir)
{
    vec3 r = reflect(raydir, normal);
    float fresnel = pow(dot(raydir, r) * 0.5 + 0.5, fresnelSpec);
   
    //float shadow1 = Shadow(pos, lpos1);
    //float shadow2 = Shadow(pos, lpos2);
    float ao = AO(pos, normal);
    
    // diffuse
    vec3 shd = calc_sh(normalize(normal));// * Shadow(pos, normal);
    vec3 light1 = clamp(dot(normal, lpos1), 0.0, 1.0) * lcol1 * lbr;
    vec3 light2 = clamp(dot(normal, lpos2), 0.0, 1.0) * lcol2 * lbr;
    vec3 diffuse = (light1  + light2 + shd) * ao * materialBr;
    
    // specular
    vec3 shr = calc_sh(r);
    vec3 spec1 = pow(clamp(dot(r, lpos1), 0.0, 1.0), materialSpec) * lcol1 * lbr;
    vec3 spec2 = pow(clamp(dot(r, lpos2), 0.0, 1.0), materialSpec) * lcol2 * lbr;
    vec3 specular = (spec1 + spec2 + shr);
    
    float m = clamp(fresnel + 0.75, 0.0, 1.0);
    return mix(diffuse, specular, m);
}


vec3 Background(vec3 normal)
{
    vec3 shd = calc_sh(normal);
    vec3 light1 = clamp(dot(normal, lpos1), 0.0, 1.0) * lcol1;
    vec3 light2 = clamp(dot(normal, lpos2), 0.0, 1.0) * lcol2;
    return shd + light1 + light2;
}



vec4 find_surface(vec3 rayOrigin, vec3 rayDir, out float hit)
{
    vec3 pos;
    vec3 rayStep = rayDir * stepLenght;
    float k;
    
	for (int i=0; i < steps; i++)
    {
		pos = rayOrigin + rayStep * float(i);
		k = K(pos);
        if (k > threshold)
        {
            hit = 1.0;
            break;
        }
	}

	if (hit > 0.0) 
    {
		for (int i=0; i < 16; i++)
		{
			rayStep = rayStep * 0.5;
			if (k > threshold) pos = pos - rayStep;
			else pos = pos + rayStep;
			k = K(pos);
		}
    }
    
    return vec4(pos, k);
}


vec4 calc_pixel(vec3 rayOrigin, vec3 rayDir)
{
    float hit;
	vec4 surf = find_surface(rayOrigin, rayDir, hit);
    float k = surf.w;

    float dist = clamp(length(surf.xyz - rayOrigin) * 0.07 + (1.0 - hit), 0.0, 1.0);
    vec3 color;
	vec3 normal = N(surf.xyz, k);
  
    color = Lighting(normal, surf.xyz, rayDir);
    color = color * exposure;

    color = mix(color, Background(rayDir), dist * dist);
    
	return vec4(color, dist);
}
void mainImage( out vec4 fragColor, in vec2 fragCoord ) 
{	
	vec2 plane = -1.0 + 2.0 * (fragCoord.xy / iResolution.xy);
    plane.y *= (9.0 / 16.0);
    
    float planeDistance = 0.8;
    float cameraDistance = 3.0;
	vec3 camPos = vec3(2.0, 2.0, -cameraDistance);
	vec3 target = vec3(1.2, 0.2, 0.0);
	vec3 forward = normalize(target - camPos);
	vec3 right = cross(forward, vec3(0.0, 1.0, 0.0));	
	vec3 up = cross(forward, right); 
	vec3 rayOrigin = camPos - right * plane.x - up * plane.y + forward * planeDistance;
	
	vec3 rayDir = (normalize(rayOrigin - camPos));
    fragColor = calc_pixel(rayOrigin, rayDir);
}
