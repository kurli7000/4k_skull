vec3 SKULL[1014] = vec3[](
vec3(-0.198, 1.035, -0.433),vec3(0.133, 1.060, -0.437),vec3(0.028, 0.643, -0.461),
vec3(0.133, 1.060, -0.437),vec3(0.370, 0.683, -0.362),vec3(0.028, 0.643, -0.461),
vec3(-0.190, 0.590, -0.411),vec3(-0.198, 1.035, -0.433),vec3(0.028, 0.643, -0.461),
vec3(-0.190, 0.590, -0.411),vec3(0.028, 0.643, -0.461),vec3(0.004, 0.443, -0.363),
vec3(0.370, 0.683, -0.362),vec3(0.325, 0.430, -0.277),vec3(0.028, 0.643, -0.461),
vec3(-0.417, 0.680, -0.317),vec3(-0.198, 1.035, -0.433),vec3(-0.190, 0.590, -0.411),
vec3(0.133, 1.060, -0.437),vec3(0.285, 1.241, -0.316),vec3(0.370, 0.683, -0.362),
vec3(-0.198, 1.035, -0.433),vec3(-0.235, 1.262, -0.311),vec3(0.133, 1.060, -0.437),
vec3(-0.235, 1.262, -0.311),vec3(-0.198, 1.035, -0.433),vec3(-0.300, 1.158, -0.344),
vec3(-0.333, 0.428, -0.258),vec3(-0.190, 0.590, -0.411),vec3(0.004, 0.443, -0.363),
vec3(0.325, 0.430, -0.277),vec3(0.004, 0.443, -0.363),vec3(0.028, 0.643, -0.461),
vec3(-0.333, 0.428, -0.258),vec3(-0.417, 0.680, -0.317),vec3(-0.190, 0.590, -0.411),
vec3(0.285, 1.241, -0.316),vec3(0.449, 1.088, -0.208),vec3(0.370, 0.683, -0.362),
vec3(-0.481, 0.922, -0.209),vec3(-0.198, 1.035, -0.433),vec3(-0.417, 0.680, -0.317),
vec3(-0.300, 1.158, -0.344),vec3(-0.198, 1.035, -0.433),vec3(-0.481, 0.922, -0.209),
vec3(-0.235, 1.262, -0.311),vec3(0.285, 1.241, -0.316),vec3(0.133, 1.060, -0.437),
vec3(0.285, 1.241, -0.316),vec3(-0.235, 1.262, -0.311),vec3(-0.193, 1.394, -0.129),
vec3(-0.010, 0.276, -0.206),vec3(0.004, 0.443, -0.363),vec3(0.325, 0.430, -0.277),
vec3(0.370, 0.683, -0.362),vec3(0.475, 0.697, -0.209),vec3(0.325, 0.430, -0.277),
vec3(0.449, 1.088, -0.208),vec3(0.475, 0.697, -0.209),vec3(0.370, 0.683, -0.362),
vec3(0.285, 1.241, -0.316),vec3(0.356, 1.278, -0.176),vec3(0.449, 1.088, -0.208),
vec3(-0.356, 1.251, -0.220),vec3(-0.235, 1.262, -0.311),vec3(-0.300, 1.158, -0.344),
vec3(-0.193, 1.394, -0.129),vec3(0.200, 1.399, -0.104),vec3(0.285, 1.241, -0.316),
vec3(-0.017, 0.080, -0.206),vec3(-0.010, 0.276, -0.206),vec3(0.138, 0.102, -0.185),
vec3(-0.017, 0.080, -0.206),vec3(-0.136, 0.107, -0.186),vec3(-0.010, 0.276, -0.206),
vec3(-0.010, 0.276, -0.206),vec3(0.325, 0.430, -0.277),vec3(0.137, 0.227, -0.159),
vec3(0.137, 0.227, -0.159),vec3(0.138, 0.102, -0.185),vec3(-0.010, 0.276, -0.206),
vec3(-0.010, 0.276, -0.206),vec3(-0.136, 0.107, -0.186),vec3(-0.180, 0.192, -0.118),
vec3(0.137, 0.227, -0.159),vec3(0.325, 0.430, -0.277),vec3(0.187, 0.193, -0.103),
vec3(-0.010, 0.276, -0.206),vec3(-0.333, 0.428, -0.258),vec3(0.004, 0.443, -0.363),
vec3(-0.333, 0.428, -0.258),vec3(-0.457, 0.614, -0.158),vec3(-0.417, 0.680, -0.317),
vec3(-0.481, 0.922, -0.209),vec3(-0.417, 0.680, -0.317),vec3(-0.457, 0.614, -0.158),
vec3(-0.300, 1.158, -0.344),vec3(-0.481, 0.922, -0.209),vec3(-0.356, 1.251, -0.220),
vec3(0.285, 1.241, -0.316),vec3(0.200, 1.399, -0.104),vec3(0.356, 1.278, -0.176),
vec3(-0.010, 0.276, -0.206),vec3(-0.180, 0.192, -0.118),vec3(-0.333, 0.428, -0.258),
vec3(0.137, 0.227, -0.159),vec3(0.187, 0.193, -0.103),vec3(0.138, 0.102, -0.185),
vec3(-0.124, 0.056, -0.099),vec3(-0.136, 0.107, -0.186),vec3(-0.017, 0.080, -0.206),
vec3(-0.124, 0.056, -0.099),vec3(-0.191, 0.054, -0.052),vec3(-0.136, 0.107, -0.186),
vec3(-0.261, 0.319, 0.042),vec3(-0.333, 0.428, -0.258),vec3(-0.180, 0.192, -0.118),
vec3(0.325, 0.430, -0.277),vec3(0.475, 0.697, -0.209),vec3(0.427, 0.550, -0.016),
vec3(-0.417, 0.669, 0.190),vec3(-0.481, 0.922, -0.209),vec3(-0.457, 0.614, -0.158),
vec3(-0.356, 1.251, -0.220),vec3(-0.481, 0.922, -0.209),vec3(-0.474, 1.072, -0.018),
vec3(-0.356, 1.251, -0.220),vec3(-0.193, 1.394, -0.129),vec3(-0.235, 1.262, -0.311),
vec3(0.187, 0.193, -0.103),vec3(0.195, 0.071, -0.047),vec3(0.138, 0.102, -0.185),
vec3(-0.180, 0.192, -0.118),vec3(-0.136, 0.107, -0.186),vec3(-0.191, 0.054, -0.052),
vec3(-0.428, 0.571, -0.025),vec3(-0.457, 0.614, -0.158),vec3(-0.333, 0.428, -0.258),
vec3(0.187, 0.193, -0.103),vec3(0.427, 0.550, -0.016),vec3(0.253, 0.307, 0.053),
vec3(0.325, 0.430, -0.277),vec3(0.427, 0.550, -0.016),vec3(0.187, 0.193, -0.103),
vec3(-0.428, 0.571, -0.025),vec3(-0.333, 0.428, -0.258),vec3(-0.261, 0.319, 0.042),
vec3(0.449, 1.088, -0.208),vec3(0.454, 1.039, 0.149),vec3(0.475, 0.697, -0.209),
vec3(-0.285, 1.357, 0.093),vec3(-0.356, 1.251, -0.220),vec3(-0.474, 1.072, -0.018),
vec3(-0.193, 1.394, -0.129),vec3(-0.356, 1.251, -0.220),vec3(-0.285, 1.357, 0.093),
vec3(-0.174, 0.111, 0.077),vec3(-0.180, 0.192, -0.118),vec3(-0.191, 0.054, -0.052),
vec3(-0.124, 0.056, -0.099),vec3(-0.117, 0.011, 0.095),vec3(-0.191, 0.054, -0.052),
vec3(0.187, 0.193, -0.103),vec3(0.159, 0.092, 0.101),vec3(0.195, 0.071, -0.047),
vec3(0.253, 0.307, 0.053),vec3(0.159, 0.092, 0.101),vec3(0.187, 0.193, -0.103),
vec3(-0.261, 0.319, 0.042),vec3(-0.180, 0.192, -0.118),vec3(-0.174, 0.111, 0.077),
vec3(-0.417, 0.669, 0.190),vec3(-0.457, 0.614, -0.158),vec3(-0.428, 0.571, -0.025),
vec3(0.475, 0.697, -0.209),vec3(0.425, 0.663, 0.159),vec3(0.427, 0.550, -0.016),
vec3(-0.474, 1.072, -0.018),vec3(-0.481, 0.922, -0.209),vec3(-0.395, 0.726, 0.333),
vec3(-0.395, 0.726, 0.333),vec3(-0.481, 0.922, -0.209),vec3(-0.417, 0.669, 0.190),
vec3(0.449, 1.088, -0.208),vec3(0.356, 1.278, -0.176),vec3(0.368, 1.222, 0.225),
vec3(0.368, 1.222, 0.225),vec3(0.454, 1.039, 0.149),vec3(0.449, 1.088, -0.208),
vec3(0.200, 1.399, -0.104),vec3(0.219, 1.376, 0.149),vec3(0.356, 1.278, -0.176),
vec3(-0.191, 0.054, -0.052),vec3(-0.117, 0.011, 0.095),vec3(-0.174, 0.111, 0.077),
vec3(0.134, 0.130, 0.252),vec3(0.159, 0.092, 0.101),vec3(0.253, 0.307, 0.053),
vec3(0.427, 0.550, -0.016),vec3(0.295, 0.293, 0.205),vec3(0.253, 0.307, 0.053),
vec3(-0.261, 0.319, 0.042),vec3(-0.430, 0.493, 0.118),vec3(-0.428, 0.571, -0.025),
vec3(0.454, 1.039, 0.149),vec3(0.417, 0.878, 0.319),vec3(0.475, 0.697, -0.209),
vec3(0.219, 1.376, 0.149),vec3(0.368, 1.222, 0.225),vec3(0.356, 1.278, -0.176),
vec3(-0.002, 1.406, 0.191),vec3(0.200, 1.399, -0.104),vec3(-0.193, 1.394, -0.129),
vec3(0.159, 0.092, 0.101),vec3(0.138, 0.016, 0.070),vec3(0.195, 0.071, -0.047),
vec3(-0.103, 0.099, 0.177),vec3(-0.174, 0.111, 0.077),vec3(-0.117, 0.011, 0.095),
vec3(-0.174, 0.111, 0.077),vec3(-0.166, 0.214, 0.254),vec3(-0.261, 0.319, 0.042),
vec3(-0.430, 0.493, 0.118),vec3(-0.261, 0.319, 0.042),vec3(-0.304, 0.303, 0.195),
vec3(-0.430, 0.493, 0.118),vec3(-0.304, 0.303, 0.195),vec3(-0.351, 0.396, 0.169),
vec3(0.345, 0.397, 0.172),vec3(0.295, 0.293, 0.205),vec3(0.427, 0.550, -0.016),
vec3(0.427, 0.550, -0.016),vec3(0.425, 0.663, 0.159),vec3(0.426, 0.494, 0.122),
vec3(0.268, 0.533, 0.095),vec3(0.426, 0.494, 0.122),vec3(0.366, 0.624, 0.179),
vec3(0.426, 0.494, 0.122),vec3(0.345, 0.397, 0.172),vec3(0.427, 0.550, -0.016),
vec3(0.268, 0.533, 0.095),vec3(0.209, 0.460, 0.083),vec3(0.426, 0.494, 0.122),
vec3(-0.417, 0.669, 0.190),vec3(-0.428, 0.571, -0.025),vec3(-0.430, 0.493, 0.118),
vec3(0.417, 0.878, 0.319),vec3(0.425, 0.663, 0.159),vec3(0.475, 0.697, -0.209),
vec3(-0.002, 1.406, 0.191),vec3(0.219, 1.376, 0.149),vec3(0.200, 1.399, -0.104),
vec3(-0.285, 1.357, 0.093),vec3(-0.002, 1.406, 0.191),vec3(-0.193, 1.394, -0.129),
vec3(0.138, 0.016, 0.070),vec3(0.159, 0.092, 0.101),vec3(-0.005, -0.002, 0.156),
vec3(0.159, 0.092, 0.101),vec3(-0.002, 0.059, 0.211),vec3(-0.005, -0.002, 0.156),
vec3(-0.117, 0.011, 0.095),vec3(-0.005, -0.002, 0.156),vec3(-0.103, 0.099, 0.177),
vec3(-0.005, -0.002, 0.156),vec3(-0.002, 0.059, 0.211),vec3(-0.103, 0.099, 0.177),
vec3(-0.166, 0.214, 0.254),vec3(-0.174, 0.111, 0.077),vec3(-0.103, 0.099, 0.177),
vec3(0.134, 0.130, 0.252),vec3(-0.002, 0.059, 0.211),vec3(0.159, 0.092, 0.101),
vec3(0.253, 0.307, 0.053),vec3(0.177, 0.250, 0.217),vec3(0.134, 0.130, 0.252),
vec3(-0.430, 0.493, 0.118),vec3(-0.351, 0.396, 0.169),vec3(-0.213, 0.411, 0.135),
vec3(-0.166, 0.214, 0.254),vec3(-0.304, 0.303, 0.195),vec3(-0.261, 0.319, 0.042),
vec3(0.186, 0.393, 0.146),vec3(0.345, 0.397, 0.172),vec3(0.209, 0.460, 0.083),
vec3(0.177, 0.250, 0.217),vec3(0.253, 0.307, 0.053),vec3(0.295, 0.293, 0.205),
vec3(0.426, 0.494, 0.122),vec3(0.209, 0.460, 0.083),vec3(0.345, 0.397, 0.172),
vec3(0.425, 0.663, 0.159),vec3(0.366, 0.624, 0.179),vec3(0.426, 0.494, 0.122),
vec3(-0.233, 0.421, 0.186),vec3(-0.213, 0.411, 0.135),vec3(-0.351, 0.396, 0.169),
vec3(0.366, 0.624, 0.179),vec3(0.283, 0.640, 0.171),vec3(0.268, 0.533, 0.095),
vec3(-0.417, 0.669, 0.190),vec3(-0.344, 0.625, 0.169),vec3(-0.333, 0.629, 0.214),
vec3(0.366, 0.624, 0.179),vec3(0.425, 0.663, 0.159),vec3(0.379, 0.633, 0.292),
vec3(-0.417, 0.669, 0.190),vec3(-0.430, 0.493, 0.118),vec3(-0.344, 0.625, 0.169),
vec3(-0.391, 1.112, 0.275),vec3(-0.285, 1.357, 0.093),vec3(-0.474, 1.072, -0.018),
vec3(0.368, 1.222, 0.225),vec3(0.219, 1.376, 0.149),vec3(0.251, 1.277, 0.323),
vec3(-0.221, 0.250, 0.267),vec3(-0.304, 0.303, 0.195),vec3(-0.166, 0.214, 0.254),
vec3(0.186, 0.393, 0.146),vec3(0.296, 0.432, 0.225),vec3(0.345, 0.397, 0.172),
vec3(0.136, 0.442, 0.224),vec3(0.296, 0.432, 0.225),vec3(0.186, 0.393, 0.146),
vec3(0.235, 0.301, 0.243),vec3(0.177, 0.250, 0.217),vec3(0.295, 0.293, 0.205),
vec3(-0.158, 0.295, 0.302),vec3(-0.304, 0.303, 0.195),vec3(-0.221, 0.250, 0.267),
vec3(-0.351, 0.396, 0.169),vec3(-0.320, 0.409, 0.266),vec3(-0.233, 0.421, 0.186),
vec3(-0.233, 0.421, 0.186),vec3(-0.345, 0.491, 0.288),vec3(-0.207, 0.459, 0.236),
vec3(-0.345, 0.491, 0.288),vec3(-0.233, 0.421, 0.186),vec3(-0.320, 0.409, 0.266),
vec3(0.296, 0.432, 0.225),vec3(0.320, 0.391, 0.255),vec3(0.345, 0.397, 0.172),
vec3(0.295, 0.293, 0.205),vec3(0.345, 0.397, 0.172),vec3(0.320, 0.391, 0.255),
vec3(0.296, 0.432, 0.225),vec3(0.258, 0.532, 0.296),vec3(0.342, 0.520, 0.295),
vec3(0.258, 0.532, 0.296),vec3(0.296, 0.432, 0.225),vec3(0.136, 0.442, 0.224),
vec3(0.296, 0.432, 0.225),vec3(0.342, 0.520, 0.295),vec3(0.320, 0.391, 0.255),
vec3(-0.243, 0.349, 0.337),vec3(-0.320, 0.409, 0.266),vec3(-0.158, 0.295, 0.302),
vec3(-0.320, 0.409, 0.266),vec3(-0.304, 0.303, 0.195),vec3(-0.158, 0.295, 0.302),
vec3(-0.320, 0.409, 0.266),vec3(-0.351, 0.396, 0.169),vec3(-0.304, 0.303, 0.195),
vec3(0.221, 0.613, 0.263),vec3(0.283, 0.640, 0.171),vec3(0.366, 0.624, 0.179),
vec3(0.228, 0.379, 0.347),vec3(0.235, 0.301, 0.243),vec3(0.320, 0.391, 0.255),
vec3(0.320, 0.391, 0.255),vec3(0.235, 0.301, 0.243),vec3(0.295, 0.293, 0.205),
vec3(0.366, 0.624, 0.179),vec3(0.342, 0.520, 0.295),vec3(0.221, 0.613, 0.263),
vec3(0.425, 0.663, 0.159),vec3(0.417, 0.878, 0.319),vec3(0.379, 0.633, 0.292),
vec3(-0.337, 0.548, 0.299),vec3(-0.417, 0.669, 0.190),vec3(-0.333, 0.629, 0.214),
vec3(-0.391, 1.112, 0.275),vec3(-0.474, 1.072, -0.018),vec3(-0.395, 0.726, 0.333),
vec3(-0.021, 1.344, 0.355),vec3(-0.002, 1.406, 0.191),vec3(-0.285, 1.357, 0.093),
vec3(-0.273, 1.264, 0.317),vec3(-0.021, 1.344, 0.355),vec3(-0.285, 1.357, 0.093),
vec3(-0.152, 0.138, 0.328),vec3(-0.205, 0.179, 0.347),vec3(-0.166, 0.214, 0.254),
vec3(-0.152, 0.138, 0.328),vec3(-0.166, 0.214, 0.254),vec3(-0.103, 0.099, 0.177),
vec3(-0.205, 0.179, 0.347),vec3(-0.221, 0.250, 0.267),vec3(-0.166, 0.214, 0.254),
vec3(0.228, 0.379, 0.347),vec3(0.139, 0.301, 0.328),vec3(0.235, 0.301, 0.243),
vec3(-0.320, 0.409, 0.266),vec3(-0.243, 0.349, 0.337),vec3(-0.184, 0.359, 0.359),
vec3(-0.320, 0.409, 0.266),vec3(-0.184, 0.359, 0.359),vec3(-0.279, 0.477, 0.378),
vec3(0.215, 0.460, 0.375),vec3(0.258, 0.532, 0.296),vec3(0.170, 0.401, 0.330),
vec3(0.177, 0.250, 0.217),vec3(0.201, 0.159, 0.360),vec3(0.134, 0.130, 0.252),
vec3(0.235, 0.301, 0.243),vec3(0.201, 0.159, 0.360),vec3(0.177, 0.250, 0.217),
vec3(0.290, 0.518, 0.391),vec3(0.228, 0.379, 0.347),vec3(0.320, 0.391, 0.255),
vec3(0.258, 0.532, 0.296),vec3(0.221, 0.613, 0.263),vec3(0.342, 0.520, 0.295),
vec3(0.342, 0.520, 0.295),vec3(0.290, 0.518, 0.391),vec3(0.320, 0.391, 0.255),
vec3(-0.253, 0.514, 0.288),vec3(-0.207, 0.459, 0.236),vec3(-0.345, 0.491, 0.288),
vec3(-0.279, 0.477, 0.378),vec3(-0.345, 0.491, 0.288),vec3(-0.320, 0.409, 0.266),
vec3(-0.417, 0.669, 0.190),vec3(-0.337, 0.548, 0.299),vec3(-0.395, 0.726, 0.333),
vec3(-0.345, 0.491, 0.288),vec3(-0.337, 0.548, 0.299),vec3(-0.253, 0.514, 0.288),
vec3(0.366, 0.624, 0.179),vec3(0.379, 0.633, 0.292),vec3(0.342, 0.520, 0.295),
vec3(-0.275, 0.980, 0.531),vec3(-0.391, 1.112, 0.275),vec3(-0.395, 0.726, 0.333),
vec3(-0.273, 1.264, 0.317),vec3(-0.285, 1.357, 0.093),vec3(-0.391, 1.112, 0.275),
vec3(-0.021, 1.344, 0.355),vec3(0.219, 1.376, 0.149),vec3(-0.002, 1.406, 0.191),
vec3(0.219, 1.376, 0.149),vec3(-0.021, 1.344, 0.355),vec3(0.251, 1.277, 0.323),
vec3(-0.046, 0.047, 0.405),vec3(-0.162, 0.085, 0.419),vec3(-0.002, 0.059, 0.211),
vec3(-0.162, 0.085, 0.419),vec3(-0.103, 0.099, 0.177),vec3(-0.002, 0.059, 0.211),
vec3(0.171, 0.086, 0.427),vec3(0.005, 0.060, 0.423),vec3(-0.002, 0.059, 0.211),
vec3(0.201, 0.159, 0.360),vec3(0.171, 0.086, 0.427),vec3(0.134, 0.130, 0.252),
vec3(0.134, 0.130, 0.252),vec3(0.171, 0.086, 0.427),vec3(-0.002, 0.059, 0.211),
vec3(-0.002, 0.059, 0.211),vec3(0.005, 0.060, 0.423),vec3(-0.046, 0.047, 0.405),
vec3(-0.152, 0.138, 0.328),vec3(-0.103, 0.099, 0.177),vec3(-0.162, 0.085, 0.419),
vec3(-0.162, 0.085, 0.419),vec3(-0.236, 0.111, 0.421),vec3(-0.152, 0.138, 0.328),
vec3(-0.236, 0.111, 0.421),vec3(-0.205, 0.179, 0.347),vec3(-0.152, 0.138, 0.328),
vec3(-0.205, 0.179, 0.347),vec3(-0.158, 0.295, 0.302),vec3(-0.221, 0.250, 0.267),
vec3(-0.205, 0.179, 0.347),vec3(-0.148, 0.218, 0.375),vec3(-0.158, 0.295, 0.302),
vec3(-0.243, 0.349, 0.337),vec3(-0.158, 0.295, 0.302),vec3(-0.184, 0.359, 0.359),
vec3(0.139, 0.301, 0.328),vec3(0.147, 0.216, 0.373),vec3(0.235, 0.301, 0.243),
vec3(0.235, 0.301, 0.243),vec3(0.147, 0.216, 0.373),vec3(0.201, 0.159, 0.360),
vec3(-0.060, 0.468, 0.399),vec3(-0.167, 0.401, 0.330),vec3(-0.214, 0.457, 0.385),
vec3(0.170, 0.401, 0.330),vec3(0.071, 0.447, 0.387),vec3(0.215, 0.460, 0.375),
vec3(-0.292, 0.589, 0.340),vec3(-0.337, 0.548, 0.299),vec3(-0.345, 0.491, 0.288),
vec3(0.290, 0.518, 0.391),vec3(0.258, 0.532, 0.296),vec3(0.259, 0.533, 0.454),
vec3(0.215, 0.460, 0.375),vec3(0.259, 0.533, 0.454),vec3(0.258, 0.532, 0.296),
vec3(-0.279, 0.477, 0.378),vec3(-0.292, 0.589, 0.340),vec3(-0.345, 0.491, 0.288),
vec3(-0.253, 0.514, 0.288),vec3(-0.270, 0.532, 0.418),vec3(-0.214, 0.457, 0.385),
vec3(0.379, 0.633, 0.292),vec3(0.310, 0.614, 0.351),vec3(0.342, 0.520, 0.295),
vec3(-0.184, 0.359, 0.359),vec3(-0.246, 0.417, 0.493),vec3(-0.279, 0.477, 0.378),
vec3(-0.253, 0.514, 0.288),vec3(-0.214, 0.457, 0.385),vec3(-0.167, 0.401, 0.330),
vec3(-0.253, 0.514, 0.288),vec3(-0.229, 0.586, 0.284),vec3(-0.241, 0.659, 0.559),
vec3(-0.241, 0.659, 0.559),vec3(-0.270, 0.532, 0.418),vec3(-0.253, 0.514, 0.288),
vec3(-0.279, 0.477, 0.378),vec3(-0.281, 0.627, 0.428),vec3(-0.292, 0.589, 0.340),
vec3(0.342, 0.520, 0.295),vec3(0.310, 0.614, 0.351),vec3(0.290, 0.518, 0.391),
vec3(0.310, 0.614, 0.351),vec3(0.379, 0.633, 0.292),vec3(0.330, 0.720, 0.428),
vec3(-0.395, 0.726, 0.333),vec3(-0.337, 0.548, 0.299),vec3(-0.292, 0.589, 0.340),
vec3(-0.281, 0.627, 0.428),vec3(-0.395, 0.726, 0.333),vec3(-0.292, 0.589, 0.340),
vec3(0.454, 1.039, 0.149),vec3(0.368, 1.222, 0.225),vec3(0.417, 0.878, 0.319),
vec3(-0.000, 1.172, 0.550),vec3(-0.021, 1.344, 0.355),vec3(-0.273, 1.264, 0.317),
vec3(0.251, 1.277, 0.323),vec3(-0.021, 1.344, 0.355),vec3(-0.000, 1.172, 0.550),
vec3(-0.100, 0.078, 0.451),vec3(-0.162, 0.085, 0.419),vec3(-0.046, 0.047, 0.405),
vec3(0.100, 0.080, 0.443),vec3(0.005, 0.060, 0.423),vec3(0.171, 0.086, 0.427),
vec3(-0.162, 0.085, 0.419),vec3(-0.171, 0.217, 0.471),vec3(-0.236, 0.111, 0.421),
vec3(-0.171, 0.217, 0.471),vec3(-0.162, 0.085, 0.419),vec3(-0.125, 0.197, 0.478),
vec3(0.171, 0.086, 0.427),vec3(0.173, 0.059, 0.459),vec3(0.100, 0.080, 0.443),
vec3(0.005, 0.060, 0.423),vec3(0.100, 0.080, 0.443),vec3(0.066, 0.009, 0.488),
vec3(0.181, 0.195, 0.450),vec3(0.239, 0.111, 0.423),vec3(0.201, 0.159, 0.360),
vec3(-0.046, 0.047, 0.405),vec3(-0.064, 0.011, 0.493),vec3(-0.100, 0.078, 0.451),
vec3(-0.100, 0.078, 0.451),vec3(-0.178, 0.045, 0.461),vec3(-0.162, 0.085, 0.419),
vec3(0.181, 0.195, 0.450),vec3(0.104, 0.253, 0.497),vec3(0.171, 0.086, 0.427),
vec3(0.171, 0.086, 0.427),vec3(0.239, 0.111, 0.423),vec3(0.181, 0.195, 0.450),
vec3(0.201, 0.159, 0.360),vec3(0.239, 0.111, 0.423),vec3(0.171, 0.086, 0.427),
vec3(0.139, 0.301, 0.328),vec3(0.138, 0.363, 0.497),vec3(0.147, 0.216, 0.373),
vec3(-0.060, 0.468, 0.399),vec3(-0.066, 0.358, 0.543),vec3(-0.061, 0.373, 0.412),
vec3(-0.139, 0.354, 0.485),vec3(-0.158, 0.295, 0.302),vec3(-0.148, 0.218, 0.375),
vec3(0.138, 0.363, 0.497),vec3(0.139, 0.301, 0.328),vec3(0.228, 0.379, 0.347),
vec3(-0.171, 0.217, 0.471),vec3(-0.148, 0.218, 0.375),vec3(-0.205, 0.179, 0.347),
vec3(-0.205, 0.179, 0.347),vec3(-0.236, 0.111, 0.421),vec3(-0.171, 0.217, 0.471),
vec3(0.259, 0.533, 0.454),vec3(0.215, 0.460, 0.375),vec3(0.265, 0.515, 0.479),
vec3(-0.139, 0.354, 0.485),vec3(-0.246, 0.417, 0.493),vec3(-0.184, 0.359, 0.359),
vec3(0.242, 0.413, 0.494),vec3(0.138, 0.363, 0.497),vec3(0.228, 0.379, 0.347),
vec3(-0.139, 0.354, 0.485),vec3(-0.184, 0.359, 0.359),vec3(-0.158, 0.295, 0.302),
vec3(0.147, 0.216, 0.373),vec3(0.181, 0.195, 0.450),vec3(0.201, 0.159, 0.360),
vec3(-0.161, 0.471, 0.545),vec3(-0.060, 0.468, 0.399),vec3(-0.214, 0.457, 0.385),
vec3(0.154, 0.474, 0.552),vec3(0.215, 0.460, 0.375),vec3(0.071, 0.447, 0.387),
vec3(0.310, 0.614, 0.351),vec3(0.243, 0.748, 0.535),vec3(0.290, 0.518, 0.391),
vec3(-0.246, 0.417, 0.493),vec3(-0.283, 0.542, 0.466),vec3(-0.279, 0.477, 0.378),
vec3(-0.137, 0.649, 0.323),vec3(-0.241, 0.659, 0.559),vec3(-0.229, 0.586, 0.284),
vec3(0.290, 0.518, 0.391),vec3(0.242, 0.413, 0.494),vec3(0.228, 0.379, 0.347),
vec3(-0.241, 0.659, 0.559),vec3(-0.252, 0.520, 0.475),vec3(-0.270, 0.532, 0.418),
vec3(0.232, 0.626, 0.441),vec3(0.258, 0.532, 0.296),vec3(0.290, 0.518, 0.391),
vec3(0.243, 0.748, 0.535),vec3(0.310, 0.614, 0.351),vec3(0.330, 0.720, 0.428),
vec3(-0.281, 0.627, 0.428),vec3(-0.279, 0.477, 0.378),vec3(-0.270, 0.532, 0.418),
vec3(-0.252, 0.520, 0.475),vec3(-0.214, 0.457, 0.385),vec3(-0.270, 0.532, 0.418),
vec3(-0.279, 0.477, 0.378),vec3(-0.283, 0.542, 0.466),vec3(-0.270, 0.532, 0.418),
vec3(0.259, 0.533, 0.454),vec3(0.232, 0.626, 0.441),vec3(0.290, 0.518, 0.391),
vec3(-0.283, 0.542, 0.466),vec3(-0.281, 0.627, 0.428),vec3(-0.270, 0.532, 0.418),
vec3(0.379, 0.633, 0.292),vec3(0.417, 0.878, 0.319),vec3(0.330, 0.720, 0.428),
vec3(0.238, 0.996, 0.554),vec3(0.417, 0.878, 0.319),vec3(0.368, 1.222, 0.225),
vec3(0.251, 1.277, 0.323),vec3(0.238, 0.996, 0.554),vec3(0.368, 1.222, 0.225),
vec3(-0.275, 0.980, 0.531),vec3(-0.273, 1.264, 0.317),vec3(-0.391, 1.112, 0.275),
vec3(-0.162, 0.085, 0.419),vec3(-0.178, 0.045, 0.461),vec3(-0.125, 0.197, 0.478),
vec3(-0.109, 0.151, 0.506),vec3(-0.178, 0.045, 0.461),vec3(-0.100, 0.078, 0.451),
vec3(-0.178, 0.045, 0.461),vec3(-0.109, 0.151, 0.506),vec3(-0.125, 0.197, 0.478),
vec3(-0.064, 0.011, 0.493),vec3(-0.046, 0.047, 0.405),vec3(0.005, 0.060, 0.423),
vec3(0.066, 0.009, 0.488),vec3(0.100, 0.080, 0.443),vec3(0.089, 0.066, 0.505),
vec3(0.171, 0.086, 0.427),vec3(0.104, 0.253, 0.497),vec3(0.173, 0.059, 0.459),
vec3(0.011, 0.177, 0.548),vec3(0.005, 0.060, 0.423),vec3(0.066, 0.009, 0.488),
vec3(0.147, 0.216, 0.373),vec3(0.138, 0.363, 0.497),vec3(0.181, 0.195, 0.450),
vec3(0.164, 0.268, 0.499),vec3(0.181, 0.195, 0.450),vec3(0.138, 0.363, 0.497),
vec3(-0.055, 0.132, 0.529),vec3(-0.100, 0.078, 0.451),vec3(-0.064, 0.011, 0.493),
vec3(0.005, 0.060, 0.423),vec3(0.011, 0.177, 0.548),vec3(-0.064, 0.011, 0.493),
vec3(0.086, 0.261, 0.577),vec3(0.100, 0.080, 0.443),vec3(0.173, 0.059, 0.459),
vec3(0.086, 0.261, 0.577),vec3(0.173, 0.059, 0.459),vec3(0.104, 0.253, 0.497),
vec3(0.164, 0.268, 0.499),vec3(0.104, 0.253, 0.497),vec3(0.181, 0.195, 0.450),
vec3(-0.093, 0.314, 0.516),vec3(-0.171, 0.217, 0.471),vec3(-0.125, 0.197, 0.478),
vec3(-0.139, 0.354, 0.485),vec3(-0.148, 0.218, 0.375),vec3(-0.171, 0.217, 0.471),
vec3(-0.061, 0.373, 0.412),vec3(-0.066, 0.358, 0.543),vec3(0.075, 0.399, 0.360),
vec3(-0.139, 0.354, 0.485),vec3(-0.122, 0.422, 0.550),vec3(-0.246, 0.417, 0.493),
vec3(0.072, 0.358, 0.543),vec3(0.071, 0.447, 0.387),vec3(0.075, 0.399, 0.360),
vec3(0.039, 0.503, 0.517),vec3(0.071, 0.447, 0.387),vec3(0.072, 0.358, 0.543),
vec3(-0.002, 0.342, 0.533),vec3(0.072, 0.358, 0.543),vec3(0.075, 0.399, 0.360),
vec3(-0.002, 0.342, 0.533),vec3(0.075, 0.399, 0.360),vec3(-0.066, 0.358, 0.543),
vec3(-0.139, 0.354, 0.485),vec3(-0.171, 0.217, 0.471),vec3(-0.093, 0.314, 0.516),
vec3(0.242, 0.413, 0.494),vec3(0.290, 0.518, 0.391),vec3(0.265, 0.515, 0.479),
vec3(-0.054, 0.555, 0.556),vec3(-0.062, 0.600, 0.419),vec3(-0.046, 0.511, 0.395),
vec3(-0.252, 0.520, 0.475),vec3(-0.283, 0.542, 0.466),vec3(-0.246, 0.417, 0.493),
vec3(0.104, 0.253, 0.497),vec3(0.164, 0.268, 0.499),vec3(0.138, 0.363, 0.497),
vec3(-0.161, 0.471, 0.545),vec3(-0.214, 0.457, 0.385),vec3(-0.252, 0.520, 0.475),
vec3(-0.137, 0.649, 0.323),vec3(-0.062, 0.600, 0.419),vec3(-0.054, 0.555, 0.556),
vec3(-0.137, 0.649, 0.323),vec3(-0.054, 0.555, 0.556),vec3(-0.161, 0.679, 0.600),
vec3(-0.252, 0.520, 0.475),vec3(-0.241, 0.659, 0.559),vec3(-0.283, 0.542, 0.466),
vec3(0.154, 0.474, 0.552),vec3(0.048, 0.504, 0.396),vec3(0.058, 0.559, 0.546),
vec3(0.071, 0.447, 0.387),vec3(0.048, 0.504, 0.396),vec3(0.154, 0.474, 0.552),
vec3(0.139, 0.650, 0.413),vec3(0.058, 0.559, 0.546),vec3(0.061, 0.635, 0.327),
vec3(0.163, 0.681, 0.584),vec3(0.058, 0.559, 0.546),vec3(0.139, 0.650, 0.413),
vec3(-0.060, 0.468, 0.399),vec3(-0.054, 0.555, 0.556),vec3(-0.046, 0.511, 0.395),
vec3(-0.161, 0.471, 0.545),vec3(-0.054, 0.555, 0.556),vec3(-0.060, 0.468, 0.399),
vec3(-0.241, 0.659, 0.559),vec3(-0.281, 0.627, 0.428),vec3(-0.283, 0.542, 0.466),
vec3(0.267, 0.643, 0.526),vec3(0.163, 0.681, 0.584),vec3(0.232, 0.626, 0.441),
vec3(0.290, 0.518, 0.391),vec3(0.267, 0.643, 0.526),vec3(0.265, 0.515, 0.479),
vec3(0.243, 0.748, 0.535),vec3(0.267, 0.643, 0.526),vec3(0.290, 0.518, 0.391),
vec3(0.265, 0.515, 0.479),vec3(0.267, 0.643, 0.526),vec3(0.259, 0.533, 0.454),
vec3(0.267, 0.643, 0.526),vec3(0.232, 0.626, 0.441),vec3(0.259, 0.533, 0.454),
vec3(0.154, 0.474, 0.552),vec3(0.265, 0.515, 0.479),vec3(0.215, 0.460, 0.375),
vec3(0.243, 0.748, 0.535),vec3(0.330, 0.720, 0.428),vec3(0.238, 0.996, 0.554),
vec3(0.330, 0.720, 0.428),vec3(0.417, 0.878, 0.319),vec3(0.238, 0.996, 0.554),
vec3(-0.161, 0.679, 0.600),vec3(-0.241, 0.659, 0.559),vec3(-0.137, 0.649, 0.323),
vec3(-0.242, 0.743, 0.535),vec3(-0.281, 0.627, 0.428),vec3(-0.241, 0.659, 0.559),
vec3(-0.242, 0.743, 0.535),vec3(-0.395, 0.726, 0.333),vec3(-0.281, 0.627, 0.428),
vec3(-0.275, 0.980, 0.531),vec3(-0.395, 0.726, 0.333),vec3(-0.242, 0.743, 0.535),
vec3(0.251, 1.277, 0.323),vec3(-0.000, 1.172, 0.550),vec3(0.238, 0.996, 0.554),
vec3(-0.275, 0.980, 0.531),vec3(-0.000, 1.172, 0.550),vec3(-0.273, 1.264, 0.317),
vec3(-0.085, 0.264, 0.577),vec3(-0.125, 0.197, 0.478),vec3(-0.109, 0.151, 0.506),
vec3(0.011, 0.177, 0.548),vec3(-0.055, 0.132, 0.529),vec3(-0.064, 0.011, 0.493),
vec3(0.100, 0.080, 0.443),vec3(0.011, 0.177, 0.548),vec3(0.089, 0.066, 0.505),
vec3(0.011, 0.177, 0.548),vec3(0.066, 0.009, 0.488),vec3(0.089, 0.066, 0.505),
vec3(-0.002, 0.277, 0.531),vec3(0.011, 0.177, 0.548),vec3(0.100, 0.080, 0.443),
vec3(0.100, 0.080, 0.443),vec3(0.086, 0.261, 0.577),vec3(-0.002, 0.277, 0.531),
vec3(-0.055, 0.132, 0.529),vec3(-0.002, 0.277, 0.531),vec3(-0.100, 0.078, 0.451),
vec3(-0.002, 0.277, 0.531),vec3(-0.055, 0.132, 0.529),vec3(0.011, 0.177, 0.548),
vec3(0.138, 0.363, 0.497),vec3(0.072, 0.358, 0.543),vec3(0.104, 0.253, 0.497),
vec3(-0.085, 0.264, 0.577),vec3(-0.002, 0.277, 0.531),vec3(-0.002, 0.342, 0.533),
vec3(-0.066, 0.358, 0.543),vec3(-0.085, 0.264, 0.577),vec3(-0.002, 0.342, 0.533),
vec3(-0.002, 0.342, 0.533),vec3(0.086, 0.261, 0.577),vec3(0.072, 0.358, 0.543),
vec3(-0.093, 0.314, 0.516),vec3(-0.125, 0.197, 0.478),vec3(-0.085, 0.264, 0.577),
vec3(-0.093, 0.314, 0.516),vec3(-0.085, 0.264, 0.577),vec3(-0.066, 0.358, 0.543),
vec3(0.265, 0.515, 0.479),vec3(0.154, 0.474, 0.552),vec3(0.242, 0.413, 0.494),
vec3(0.104, 0.253, 0.497),vec3(0.072, 0.358, 0.543),vec3(0.086, 0.261, 0.577),
vec3(-0.085, 0.264, 0.577),vec3(-0.109, 0.151, 0.506),vec3(-0.100, 0.078, 0.451),
vec3(-0.100, 0.078, 0.451),vec3(-0.002, 0.277, 0.531),vec3(-0.085, 0.264, 0.577),
vec3(0.154, 0.474, 0.552),vec3(0.138, 0.363, 0.497),vec3(0.242, 0.413, 0.494),
vec3(-0.002, 0.277, 0.531),vec3(0.086, 0.261, 0.577),vec3(-0.002, 0.342, 0.533),
vec3(-0.054, 0.555, 0.556),vec3(-0.161, 0.471, 0.545),vec3(-0.122, 0.422, 0.550),
vec3(-0.060, 0.468, 0.399),vec3(-0.011, 0.517, 0.575),vec3(-0.066, 0.358, 0.543),
vec3(-0.011, 0.517, 0.575),vec3(0.039, 0.503, 0.517),vec3(0.072, 0.358, 0.543),
vec3(0.138, 0.363, 0.497),vec3(0.154, 0.474, 0.552),vec3(0.091, 0.440, 0.562),
vec3(0.058, 0.559, 0.546),vec3(0.091, 0.440, 0.562),vec3(0.154, 0.474, 0.552),
vec3(-0.139, 0.354, 0.485),vec3(-0.093, 0.314, 0.516),vec3(-0.122, 0.422, 0.550),
vec3(-0.252, 0.520, 0.475),vec3(-0.246, 0.417, 0.493),vec3(-0.161, 0.471, 0.545),
vec3(-0.246, 0.417, 0.493),vec3(-0.122, 0.422, 0.550),vec3(-0.161, 0.471, 0.545),
vec3(-0.040, 0.701, 0.609),vec3(-0.242, 0.743, 0.535),vec3(-0.161, 0.679, 0.600),
vec3(0.138, 0.363, 0.497),vec3(0.091, 0.440, 0.562),vec3(0.072, 0.358, 0.543),
vec3(0.209, 0.706, 0.593),vec3(0.267, 0.643, 0.526),vec3(0.243, 0.748, 0.535),
vec3(-0.242, 0.743, 0.535),vec3(-0.040, 0.701, 0.609),vec3(-0.275, 0.980, 0.531),
vec3(-0.275, 0.980, 0.531),vec3(-0.009, 0.991, 0.617),vec3(-0.000, 1.172, 0.550),
vec3(-0.041, 0.483, 0.635),vec3(-0.093, 0.314, 0.516),vec3(-0.066, 0.358, 0.543),
vec3(-0.041, 0.483, 0.635),vec3(-0.122, 0.422, 0.550),vec3(-0.093, 0.314, 0.516),
vec3(-0.041, 0.483, 0.635),vec3(-0.054, 0.555, 0.556),vec3(-0.122, 0.422, 0.550),
vec3(0.267, 0.643, 0.526),vec3(0.209, 0.706, 0.593),vec3(0.163, 0.681, 0.584),
vec3(0.058, 0.559, 0.546),vec3(0.006, 0.501, 0.652),vec3(0.091, 0.440, 0.562),
vec3(0.058, 0.559, 0.546),vec3(0.031, 0.615, 0.616),vec3(0.006, 0.501, 0.652),
vec3(-0.028, 0.628, 0.608),vec3(-0.054, 0.555, 0.556),vec3(0.006, 0.501, 0.652),
vec3(0.031, 0.615, 0.616),vec3(-0.028, 0.628, 0.608),vec3(0.006, 0.501, 0.652),
vec3(0.006, 0.501, 0.652),vec3(-0.054, 0.555, 0.556),vec3(-0.041, 0.483, 0.635),
vec3(-0.241, 0.659, 0.559),vec3(-0.161, 0.679, 0.600),vec3(-0.242, 0.743, 0.535),
vec3(0.006, 0.501, 0.652),vec3(-0.011, 0.517, 0.575),vec3(0.072, 0.358, 0.543),
vec3(0.006, 0.501, 0.652),vec3(0.072, 0.358, 0.543),vec3(0.091, 0.440, 0.562),
vec3(-0.041, 0.483, 0.635),vec3(-0.011, 0.517, 0.575),vec3(0.006, 0.501, 0.652),
vec3(-0.066, 0.358, 0.543),vec3(-0.011, 0.517, 0.575),vec3(-0.041, 0.483, 0.635),
vec3(0.209, 0.706, 0.593),vec3(0.031, 0.615, 0.616),vec3(0.163, 0.681, 0.584),
vec3(0.031, 0.615, 0.616),vec3(0.058, 0.559, 0.546),vec3(0.163, 0.681, 0.584),
vec3(0.238, 0.996, 0.554),vec3(0.038, 0.692, 0.607),vec3(0.243, 0.748, 0.535),
vec3(-0.028, 0.628, 0.608),vec3(-0.161, 0.679, 0.600),vec3(-0.054, 0.555, 0.556),
vec3(-0.161, 0.679, 0.600),vec3(-0.028, 0.628, 0.608),vec3(-0.040, 0.701, 0.609),
vec3(0.038, 0.692, 0.607),vec3(0.209, 0.706, 0.593),vec3(0.243, 0.748, 0.535),
vec3(0.038, 0.692, 0.607),vec3(-0.028, 0.628, 0.608),vec3(0.031, 0.615, 0.616),
vec3(0.038, 0.692, 0.607),vec3(0.031, 0.615, 0.616),vec3(0.209, 0.706, 0.593),
vec3(-0.028, 0.628, 0.608),vec3(0.038, 0.692, 0.607),vec3(-0.040, 0.701, 0.609),
vec3(-0.009, 0.991, 0.617),vec3(-0.040, 0.701, 0.609),vec3(0.038, 0.692, 0.607),
vec3(-0.009, 0.991, 0.617),vec3(0.038, 0.692, 0.607),vec3(0.238, 0.996, 0.554),
vec3(-0.275, 0.980, 0.531),vec3(-0.040, 0.701, 0.609),vec3(-0.009, 0.991, 0.617),
vec3(-0.000, 1.172, 0.550),vec3(-0.009, 0.991, 0.617),vec3(0.238, 0.996, 0.554));


const float epsilon = 0.000001;
const float exposure = 2.0;
const float planeDistance = 1.3;
const float cameraDistance = 2.0;
const vec3 camPos = vec3(-0.7, 1.0, cameraDistance);
const vec3 target = vec3(0.0, 0.66, 0.0);
const int aosamples = 50;

float hash( float n )
{
    return fract(sin(n)*43758.5453);
}

float noise(in vec3 x)
{
    vec3 p = floor(x);
    vec3 f = fract(x);

    f = f*f*(3.0-2.0*f);

    float n = p.x + p.y * 57.0 + 113.0 * p.z;

    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),
                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),
                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
    return res;
}


const float C1 = 0.429043;
const float C2 = 0.511664;
const float C3 = 0.743125;
const float C4 = 0.886227;
const float C5 = 0.247708;

const vec3 L00  = vec3(0.3346165,0.3501253,0.4190105);
const vec3 L1m1 = vec3(-0.01822244,0.05071069,0.1778315);
const vec3 L10  = vec3(0.07846313,0.08407389,0.09868017);
const vec3 L11  = vec3(0.1314106,0.1397315,0.1579466);
const vec3 L2m2 = vec3(0.09486914,0.1026747,0.1219213);
const vec3 L2m1 = vec3(0.06007795,0.06556078,0.07856019);
const vec3 L20  = vec3(0.004199291,0.004220232,0.00343507);
const vec3 L21  = vec3(0.08627155,0.08812754,0.09490526);
const vec3 L22  = vec3(0.0378471,0.04129455,0.04597192);

vec3 light0 = normalize(vec3(1.0, 1.0, 1.0));


vec3 calc_sh(vec3 normal) {
	vec3 n  = normalize(normal);
	return (C1 * L22 * (n.x * n.x - n.y * n.y) +
		C3 * L20 *  n.z * n.z +
		C4 * L00 - C5 * L20 +
		2.0 * C1 * L2m2 * n.x * n.y + 
		2.0 * C1 * L21 * n.x * n.z + 
		2.0 * C1 * L2m1 * n.y * n.z + 
		2.0 * C2 * L11 * n.x+
		2.0 * C2 * L1m1 * n.y +
		2.0 * C2 * L10 * n.z);
}



bool Plane(vec3 rayOrigin, vec3 rayDir, vec4 plane, out vec4 p)
{ 
    if (abs(dot(plane.xyz, rayDir)) < epsilon) return false;
    
	float t = -(dot(plane.xyz, rayOrigin) + plane.w) / dot(plane.xyz, rayDir);
    p.xyz = rayOrigin + t * rayDir;
    p.w = t;
    
    if (t < 0.0) return false;
    
    return true;
}

/*
bool Triangle(vec3 rayOrigin, vec3 rayDir, vec3 p0, vec3 p1, vec3 p2, out vec4 p)
{
    vec3 normal = cross(p1 - p0, p2 - p0);
    float d = dot(normal, p0);
	bool pHit = Plane(rayOrigin, rayDir, vec4(normal, d), p);
    
    if (!pHit) return false;
    
    vec3 edge0 = p1 - p0; 
   	vec3 vp0 = p.xyz - p0;
    if (dot(normal, cross(edge0, vp0)) < 0.0) return false;
    	
    vec3 edge1 = p2 - p1; 
    vec3 vp1 = p.xyz - p1;
    if (dot(normal, cross(edge1, vp1)) < 0.0) return false;
        
   	vec3 edge2 = p0 - p2; 
    vec3 vp2 = p.xyz - p2;
    if (dot(normal, cross(edge2, vp2)) < 0.0) return false;

  	return true;
}
*/

bool Triangle(vec3 rayOrigin, vec3 rayDir, vec3 v0, vec3 v1, vec3 v2, out vec4 p)
{
    vec3 v0v1 = v1 - v0; 
    vec3 v0v2 = v2 - v0; 
    vec3 pvec = cross(rayDir, v0v2); 
    float det = dot(v0v1, pvec); 
	float u, v, t;
    
    if (abs(det) < epsilon) return false;
    
    float invDet = 1.0 / det; 
 
    vec3 tvec = rayOrigin - v0;
    u = dot(tvec, pvec) * invDet; 
    if (u < 0.0 || u > 1.0) return false; 
 
    vec3 qvec = cross(tvec, v0v1); 
    v = dot(rayDir, qvec) * invDet;
    if (v < 0.0 || u + v > 1.0) return false; 
 
    t = dot(v0v2, qvec) * invDet;
    
    if (t < 0.0) return false;
    
    p.xyz = rayOrigin + t * rayDir;
    p.w = t;
    
    return true; 
}     



bool scene(vec3 rayOrigin, vec3 rayDir, out vec4 p, out vec3 n, out vec3 color)
{
	bool hit = false;
    p = vec4(0.0, 0.0, 0.0, 10000000.0);
    
    for (int i = 0; i < 338; i++)
    {
        vec4 p2;
        
        if (Triangle(rayOrigin, rayDir, SKULL[i * 3 + 0], SKULL[i * 3 + 1], SKULL[i * 3 + 2], p2))
        {
            hit = true;
            if (p2.w < p.w)
            {
                p = p2;
                n = normalize(cross(SKULL[i * 3 + 1] - SKULL[i * 3 + 0], SKULL[i * 3 + 2] - SKULL[i * 3 + 0]));
                color = vec3(1.0, 1.0, 1.0);
            }
        }
    }
    
    {
    	vec4 p2;
        
        if (Plane(rayOrigin, rayDir, vec4(0.0, 1.0, 0.0, 0.0), p2))
        {
            hit = true;
            if (p2.w < p.w)
            {
                p = p2;
                n = vec3(0.0, 1.0, 0.0);
                color = vec3(0.7, 0.7, 0.7);
            }
        }
    }
	
    return hit;
}


float ao(vec3 p, vec3 n)
{
    vec4 pp;
    vec3 nn;
    vec3 c;
    float aops = 1.0 / float(aosamples);
    float ao = 1.0;
    vec3 np = p;

    for (int x = 0; x < aosamples; x++)
    {
        float xx = float(x + 1);
        float n1 = noise(np.xyz * 3.7373 * xx) - 0.5;
        float n2 = noise(np.yzx * 5.7777 * xx) - 0.5;
        float n3 = noise(np.xzy * 7.5959 * xx) - 0.5;
        float n4 = noise(np.xyz * 7.5959 * xx);
        
        vec3 dir = normalize(light0 * n4 + vec3(n1, n2, n3));
        
        if (scene(p + dir * 0.001, dir, pp, nn, c))
        {
            ao = ao - clamp(1.0 / pp.w, 0.0, 1.0) * aops;
            np = pp.xyz;
        }
        np = np.yzx;
    }
      
    return ao;
}



vec4 calc_pixel(vec3 rayOrigin, vec3 rayDir)
{
    vec4 p;
    vec3 n;
    vec3 color;
   
	bool hit = scene(rayOrigin, rayDir, p, n, color);
    vec3 bg = calc_sh(rayDir);
    //float shdw = shadow(p.xyz);
        
    if (hit)
    {
        color = mix(ao(p.xyz, n) * calc_sh(n) * color, bg, clamp(p.w / 20.0, 0.0, 1.0));
    }
    else
    {
        color = bg;
    }
    
    
	return vec4(color * exposure, 1.0);
}


void mainImage( out vec4 fragColor, in vec2 fragCoord ) 
{	
	vec2 plane = -1.0 + 2.0 * (fragCoord.xy / iResolution.xy);
    plane.y *= (9.0 / 16.0);
	vec3 forward = normalize(target - camPos);
	vec3 right = cross(forward, vec3(0.0, 1.0, 0.0));	
	vec3 up = cross(forward, right); 
	vec3 rayOrigin = camPos - right * plane.x - up * plane.y + forward * planeDistance;
	
	vec3 rayDir = (normalize(rayOrigin - camPos));
    fragColor = calc_pixel(rayOrigin, rayDir);
}
